name: Terratest

on:
  workflow_call:
    inputs:
      go_version:
        description: Go toolchain version for Terratest.
        required: false
        type: string
        default: "1.23.6"
      terraform_version:
        description: Terraform CLI version to install for tests.
        required: false
        type: string
        default: "1.8.5"
      working_directory:
        description: Directory containing Terratest sources.
        required: false
        type: string
        default: "test"
      # Either provide a single test_pattern, or provide tests_json for matrix fan-out
      test_pattern:
        description: Test name regex or 'all'. Used when tests_json is empty.
        required: false
        type: string
        default: "all"
      tests_json:
        description: JSON array of test names to run as a matrix (e.g. '["TestA","TestB"]'). If non-empty, overrides test_pattern.
        required: false
        type: string
        default: '[]'
      max_parallel:
        description: Maximum number of matrix jobs to run concurrently.
        required: false
        type: string
        default: '4'
      timeout:
        description: Go test timeout value.
        required: false
        type: string
        default: "20m"
      environment:
        description: Environment name used to resolve AWS account and role.
        required: false
        type: string
        default: "sandbox"
  workflow_dispatch:
    inputs:
      go_version:
        description: Go toolchain version for Terratest.
        required: false
        default: "1.23.6"
      terraform_version:
        description: Terraform CLI version to install for tests.
        required: false
        default: "1.8.5"
      working_directory:
        description: Directory containing Terratest sources.
        required: false
        default: "test"
      test_pattern:
        description: Test name regex or 'all'. Used when tests_json is empty.
        required: false
        default: "all"
      tests_json:
        description: JSON array of test names to run as a matrix (e.g. '["TestA","TestB"]'). If non-empty, overrides test_pattern.
        required: false
        default: '[]'
      max_parallel:
        description: Maximum number of matrix jobs to run concurrently.
        required: false
        default: '4'
      timeout:
        description: Go test timeout value.
        required: false
        default: "20m"
      environment:
        description: Environment name used to resolve AWS account and role.
        required: false
        default: "sandbox"

permissions:
  contents: read
  id-token: write

concurrency:
  group: terratest-${{ github.ref }}
  cancel-in-progress: false

jobs:
  terratest_matrix:
    if: ${{ inputs.tests_json != '[]' }}
    name: Run Terratest (matrix)
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    strategy:
      fail-fast: false
      max-parallel: ${{ fromJSON(inputs.max_parallel) }}
      matrix:
        test: ${{ fromJSON(inputs.tests_json) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Summarise inputs and trigger context
        uses: GrantOps-Consulting/terraform-actions/.github/actions/print-run-context@main
        with:
          title: Terratest Workflow Context (matrix)
          environment: ${{ inputs.environment }}
          aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
          aws_role_arn: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/terraform-infrastructure-role-${{ inputs.environment }}
          go_version: ${{ inputs.go_version }}
          terratest_working_directory: ${{ inputs.working_directory }}
          terratest_pattern: ${{ matrix.test }}
          terratest_timeout: ${{ inputs.timeout }}
          notes: "Reusable Terratest Workflow (matrix)"

      - name: Run Terratest (composite)
        uses: GrantOps-Consulting/terraform-actions/.github/actions/run-terratest@main
        with:
          go_version: ${{ inputs.go_version }}
          terraform_version: ${{ inputs.terraform_version }}
          working_directory: ${{ inputs.working_directory }}
          test_pattern: ${{ matrix.test }}
          timeout: ${{ inputs.timeout }}
          aws_role_to_assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/terraform-infrastructure-role-${{ inputs.environment }}
          aws_region: eu-west-1
          aws_session_name: github-actions

  terratest_single:
    if: ${{ inputs.tests_json == '[]' }}
    name: Run Terratest (single)
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Summarise inputs and trigger context
        uses: GrantOps-Consulting/terraform-actions/.github/actions/print-run-context@main
        with:
          title: Terratest Workflow Context (single)
          environment: ${{ inputs.environment }}
          aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
          aws_role_arn: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/terraform-infrastructure-role-${{ inputs.environment }}
          go_version: ${{ inputs.go_version }}
          terratest_working_directory: ${{ inputs.working_directory }}
          terratest_pattern: ${{ inputs.test_pattern }}
          terratest_timeout: ${{ inputs.timeout }}
          notes: "Reusable Terratest Workflow (single)"

      - name: Run Terratest (composite)
        uses: GrantOps-Consulting/terraform-actions/.github/actions/run-terratest@main
        with:
          go_version: ${{ inputs.go_version }}
          terraform_version: ${{ inputs.terraform_version }}
          working_directory: ${{ inputs.working_directory }}
          test_pattern: ${{ inputs.test_pattern }}
          timeout: ${{ inputs.timeout }}
          aws_role_to_assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/terraform-infrastructure-role-${{ inputs.environment }}
          aws_region: eu-west-1
          aws_session_name: github-actions

  # Stable, single check for branch protection. Exactly one of these runs,
  # but both share the same display name so repos can require one check.
  pr-gate-matrix:
    if: ${{ inputs.tests_json != '[]' }}
    name: PR Gate / All tests passed
    runs-on: ubuntu-latest
    needs: [terratest_matrix]
    steps:
      - run: echo "All tests passed"

  pr-gate-single:
    if: ${{ inputs.tests_json == '[]' }}
    name: PR Gate / All tests passed
    runs-on: ubuntu-latest
    needs: [terratest_single]
    steps:
      - run: echo "All tests passed"
